{"version":3,"sources":["images/logo.png","algorithms/mergeSort.js","algorithms/quickSort.js","views/Main.js","algorithms/bubbleSort.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","swap","items","leftIndex","rightIndex","temp","quickSortPartition","left","right","pivot","doQuickSort","index","console","log","useState","setArray","barNum","setBarNum","sortSpeed","setSortSpeed","useEffect","document","title","generateArray","arr","randNum","random","arrayBars","getElementsByClassName","arrayLength","style","backgroundColor","quickSort","arrayOne","arrayTwo","arraysAreEqual","sort","a","b","getQuickSortAnimations","setTimeout","oldPosition","newPosition","oldBarStyle","newBarStyle","dummyAnimations","height","currentPosition","makeAllBarsGreen","className","src","logo","alt","id","map","number","key","onClick","e","window","location","reload","type","value","min","max","step","onChange","target","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","color","newHeight","mergeSort","swapped","doBubbleSort","getBubbleSortAnimations","bubbleSort","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9f9829ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6137bccb.png\";","\r\nexport function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n}\r\n\r\nfunction mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n}\r\n\r\nfunction doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, j]);\r\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index i in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[i]]);\r\n            mainArray[k++] = auxiliaryArray[i++];\r\n        } else {\r\n            // We overwrite the value at index k in the original array with the\r\n            // value at index j in the auxiliary array.\r\n            animations.push([k, auxiliaryArray[j]]);\r\n            mainArray[k++] = auxiliaryArray[j++];\r\n        }\r\n    }\r\n    while (i <= middleIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([i, i]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([i, i]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n        // These are the values that we're comparing; we push them once\r\n        // to change their color.\r\n        animations.push([j, j]);\r\n        // These are the values that we're comparing; we push them a second\r\n        // time to revert their color.\r\n        animations.push([j, j]);\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n}","export function getQuickSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    if (arraysAreEqual(javaScriptSortedArray, array)) return animations;\r\n    const auxiliaryArray = array.slice();\r\n    doQuickSort(animations, auxiliaryArray, 0, auxiliaryArray.length - 1);\r\n    return animations;\r\n}\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n    if (arrayOne.length !== arrayTwo.length) return false;\r\n    for (let i = 0; i < arrayOne.length; i++) {\r\n        if (arrayOne[i] !== arrayTwo[i]) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\nfunction swap(animations, items, leftIndex, rightIndex) {\r\n    var temp = items[leftIndex];\r\n    items[leftIndex] = items[rightIndex];\r\n    items[rightIndex] = temp;\r\n\r\n    animations.push([leftIndex, rightIndex]);\r\n}\r\nexport function quickSortPartition(items, left, right, animations) {\r\n    var pivot = items[Math.floor((right + left) / 2)], //middle element\r\n        i = left, //left pointer\r\n        j = right; //right pointer\r\n    while (i <= j) {\r\n        while (items[i] < pivot) {\r\n            i++;\r\n        }\r\n        while (items[j] > pivot) {\r\n            j--;\r\n        }\r\n        if (i <= j) {\r\n            swap(animations, items, i, j); //sawpping two elements\r\n            i++;\r\n            j--;\r\n        }\r\n    }\r\n    return i;\r\n}\r\n\r\nexport function doQuickSort(animations, items, left, right) {\r\n    var index;\r\n    if (items.length > 1) {\r\n        index = quickSortPartition(items, left, right, animations); //index returned from partition\r\n        if (left < index - 1) {\r\n            //more elements on the left side of the pivot\r\n            doQuickSort(animations, items, left, index - 1);\r\n        }\r\n        if (index < right) {\r\n            //more elements on the right side of the pivot\r\n            doQuickSort(animations, items, index, right);\r\n        }\r\n    }\r\n    console.log(items);\r\n    return items;\r\n}","import React, { useState, useEffect } from 'react';\r\nimport Main from '../views/Main.css'\r\nimport logo from '../images/logo.png'\r\n\r\nimport { getMergeSortAnimations } from '../algorithms/mergeSort'\r\nimport { getBubbleSortAnimations } from \"../algorithms/bubbleSort\";\r\nimport { doBubbleSort } from \"../algorithms/bubbleSort\";\r\nimport { getQuickSortAnimations } from \"../algorithms/quickSort\";\r\nimport { doQuickSort } from \"../algorithms/quickSort\";\r\nimport { quickSortPartition } from \"../algorithms/quickSort\";\r\n\r\n// Change this value for the speed of the animations.\r\nconst ANIMATION_SPEED_MS = 10;\r\n\r\n// Change this value for the number of bars (value) in the array.\r\nconst NUMBER_OF_ARRAY_BARS = 200;\r\n\r\n// This is the main color of the array bars.\r\nconst PRIMARY_COLOR = '#ff5757';\r\n\r\n// This is the color of array bars that are being compared throughout the animations.\r\nconst SECONDARY_COLOR = '#002f6d';\r\n\r\nexport default () => {\r\n    const [array, setArray] = useState([])\r\n    const [barNum, setBarNum] = useState(50)\r\n    const [sortSpeed, setSortSpeed] = useState(5)\r\n\r\n    useEffect(() => {\r\n        document.title = \"Sorting Visualizer\";\r\n        generateArray();\r\n    }, [barNum])\r\n\r\n    const generateArray = () => {\r\n        let arr = [];\r\n        for (let i = 0; i < barNum; i++) {\r\n            let randNum = Math.floor(Math.random() * (400 - 10) + 10)\r\n            arr.push(randNum)\r\n        }\r\n        setArray(arr)\r\n\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var arrayLength = arrayBars.length;\r\n        for (let j = 0; j < arrayLength; j++) {\r\n            var jBarStyle = arrayBars[j].style;\r\n            jBarStyle.backgroundColor = PRIMARY_COLOR;\r\n        }\r\n    }\r\n\r\n    const reloadPage = () => {\r\n        window.location.reload();\r\n    }\r\n\r\n    const mergeSort = () => {\r\n        const animations = getMergeSortAnimations(array);\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n            const isColorChange = i % 3 !== 2;\r\n            if (isColorChange) {\r\n                const [barOneIdx, barTwoIdx] = animations[i];\r\n                const barOneStyle = arrayBars[barOneIdx].style;\r\n                const barTwoStyle = arrayBars[barTwoIdx].style;\r\n                const color = i % 3 === 0 ? PRIMARY_COLOR : SECONDARY_COLOR;\r\n                setTimeout(() => {\r\n                    barOneStyle.backgroundColor = color;\r\n                    barTwoStyle.backgroundColor = color;\r\n                    if (i === animations.length - 1) {\r\n                        makeAllBarsGreen();\r\n                    }\r\n                }, i * sortSpeed);\r\n            } else {\r\n                setTimeout(() => {\r\n                    const [barOneIdx, newHeight] = animations[i];\r\n                    const barOneStyle = arrayBars[barOneIdx].style;\r\n                    barOneStyle.height = `${newHeight}px`;\r\n                    if (i === animations.length - 1) {\r\n                        makeAllBarsGreen();\r\n                    }\r\n                }, i * sortSpeed);\r\n            }\r\n        }\r\n    }\r\n\r\n    const quickSort = () => {\r\n        const arr = array;\r\n        const animations = getQuickSortAnimations(arr);\r\n        console.log(animations);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                var [oldPosition, newPosition] = animations[i];\r\n\r\n                var oldBarStyle = arrayBars[oldPosition].style;\r\n                var newBarStyle = arrayBars[newPosition].style;\r\n                var index;\r\n                const dummyAnimations = [];\r\n                if (arr.length > 1) {\r\n                    index = quickSortPartition(\r\n                        arr,\r\n                        0,\r\n                        arr.length - 1,\r\n                        dummyAnimations\r\n                    ); //index returned from partition\r\n                    if (0 < index - 1) {\r\n                        //more elements on the left side of the pivot\r\n                        doQuickSort(dummyAnimations, arr, 0, index - 1);\r\n                    }\r\n                    if (index < arr.length) {\r\n                        //more elements on the right side of the pivot\r\n                        doQuickSort(dummyAnimations, arr, 0, arr.length - 1);\r\n                    }\r\n                }\r\n\r\n                oldBarStyle.height = `${arr[oldPosition]}px`;\r\n                newBarStyle.height = `${arr[newPosition]}px`;\r\n\r\n                oldBarStyle.backgroundColor = PRIMARY_COLOR;\r\n                newBarStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n                var currentPosition = oldPosition;\r\n                for (let j = 0; j < currentPosition; j++) {\r\n                    var jBarStyle = arrayBars[j].style;\r\n                    jBarStyle.backgroundColor = SECONDARY_COLOR;\r\n                }\r\n                if (i === animations.length - 1) {\r\n                    makeAllBarsGreen();\r\n                }\r\n            }, i * sortSpeed);\r\n        }\r\n    }\r\n\r\n    const bubbleSort = () => {\r\n        // We leave it as an exercise to the viewer of this code to implement this method.\r\n        const arr = array;\r\n        const animations = getBubbleSortAnimations(arr);\r\n        console.log(animations);\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                var [oldPosition, newPosition] = animations[i];\r\n\r\n                var oldBarStyle = arrayBars[oldPosition].style;\r\n                var newBarStyle = arrayBars[newPosition].style;\r\n\r\n                var temp = arr[oldPosition];\r\n                arr[oldPosition] = arr[newPosition];\r\n                arr[newPosition] = temp;\r\n\r\n                oldBarStyle.height = `${arr[oldPosition]}px`;\r\n                newBarStyle.height = `${arr[newPosition]}px`;\r\n\r\n                oldBarStyle.backgroundColor = PRIMARY_COLOR;\r\n                newBarStyle.backgroundColor = SECONDARY_COLOR;\r\n\r\n                var currentPosition = oldPosition;\r\n                for (let j = 0; j < currentPosition; j++) {\r\n                    var jBarStyle = arrayBars[j].style;\r\n                    jBarStyle.backgroundColor = PRIMARY_COLOR;\r\n                }\r\n                if (i === animations.length - 1) {\r\n                    makeAllBarsGreen();\r\n                }\r\n            }, i * sortSpeed);\r\n        }\r\n    }\r\n\r\n\r\n    const makeAllBarsGreen = () => {\r\n        console.log(\"Sorted\");\r\n        const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n        var arrayLength = arrayBars.length;\r\n        for (let j = 0; j < arrayLength; j++) {\r\n            var jBarStyle = arrayBars[j].style;\r\n            jBarStyle.backgroundColor = \"#00c2cb\";\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"logo-container\">\r\n                <img src={logo} alt=\"\" className=\"logo\"/>\r\n            </div>\r\n            <div id=\"array-container\">\r\n                {\r\n                    array.map((number, i) =>\r\n                        <p\r\n                            key={i}\r\n                            className=\"array-bar\"\r\n                            style={{\r\n                                backgroundColor: `${PRIMARY_COLOR}`,\r\n                                height: `${number}px`\r\n                            }}>\r\n                        </p>\r\n                    )\r\n                }\r\n            </div>\r\n            <div>\r\n\r\n                <div className=\"controls\">\r\n                    <div className=\"resets\">\r\n                        <button onClick={e => generateArray()}>Generate New Array</button>\r\n                        <button onClick={e => reloadPage()}>Reset</button>\r\n                    </div>\r\n                    <div className=\"sliders\">\r\n                        <div className=\"array-size\">\r\n                            <label>Array Size: </label>\r\n                            <input type=\"range\" value={barNum} min=\"50\" max=\"200\" step=\"50\" onChange={e => setBarNum(e.target.value)} />\r\n                            <span>{barNum}</span>\r\n                        </div>\r\n                        <div className=\"sort-speed\">\r\n                            <label>Sort Speed: </label>\r\n                            <input type=\"range\" value={sortSpeed} min=\"5\" max=\"20\" step=\"5\" onChange={e => setSortSpeed(e.target.value)} />\r\n                            <span>{sortSpeed}ms</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"sorts\">\r\n                        <button onClick={e => mergeSort()}>Merge Sort</button>\r\n                        <button onClick={e => quickSort()}>Quick Sort</button>\r\n                        <button onClick={e => bubbleSort()}>Bubble Sort</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","export function getBubbleSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    doBubbleSort(animations, auxiliaryArray);\r\n    return animations;\r\n}\r\n\r\nexport function doBubbleSort(animations, auxiliaryArray) {\r\n    var swapped;\r\n    do {\r\n        swapped = false;\r\n        for (var i = 0; i < auxiliaryArray.length - 1; i++) {\r\n            if (auxiliaryArray[i] > auxiliaryArray[i + 1]) {\r\n                var temp = auxiliaryArray[i];\r\n                auxiliaryArray[i] = auxiliaryArray[i + 1];\r\n                auxiliaryArray[i + 1] = temp;\r\n                animations.push([i, i + 1]);\r\n                swapped = true;\r\n            }\r\n        }\r\n    } while (swapped);\r\n    return auxiliaryArray;\r\n}","import React from 'react';\nimport Main from './views/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}